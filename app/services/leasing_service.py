# app/services/leasing_service.py
import httpx
import logging
import os
import json
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

CHECKO_API_KEY = os.getenv("CHECKO_API_KEY")
COMPANY_API_URL = "https://api.checko.ru/v2/company"
FINANCES_API_URL = "https://api.checko.ru/v2/finances"

REPORTS_DIR = "company_reports"
os.makedirs(REPORTS_DIR, exist_ok=True)


def _format_financial_value(value, year: str) -> str:
    """
    ‚úÖ –ù–û–í–ê–Ø DRY –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞.
    """
    if value is None:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    try:
        numeric_value = int(value)
        # –î–ª—è –≤—ã—Ä—É—á–∫–∏ —Ü–≤–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω, –¥–ª—è –ø—Ä–∏–±—ã–ª–∏ - –Ω—É–∂–µ–Ω
        color = "üü¢" if numeric_value >= 0 else "üî¥"
        return f"{color} {numeric_value:,} —Ä—É–±. (–∑–∞ {year} –≥.)".strip()
    except (ValueError, TypeError):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"


def format_risk_factors(data: dict) -> str:
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    risks = []
    status_name = data.get("–°—Ç–∞—Ç—É—Å", {}).get("–ù–∞–∏–º", "").lower()
    if "–ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏" in status_name or "–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ" in status_name or "–Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ" in status_name:
        risks.append(f"üî¥ –°—Ç–∞—Ç—É—Å: {data.get('–°—Ç–∞—Ç—É—Å', {}).get('–ù–∞–∏–º', '–ù/–î')}")
    if data.get("–Æ—Ä–ê–¥—Ä–µ—Å", {}).get("–ù–µ–¥–æ—Å—Ç"):
        risks.append("üü° –ê–¥—Ä–µ—Å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–π")
    tax_info = data.get("–ù–∞–ª–æ–≥–∏", {})
    if tax_info:
        arrears_value = tax_info.get("–°—É–º–ù–µ–¥–æ–∏–º")
        if arrears_value is not None:
            try:
                arrears_float = float(arrears_value)
                if arrears_float > 0:
                    risks.append(f"üî¥ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –Ω–∞–ª–æ–≥–∞–º: {arrears_float:,.2f} —Ä—É–±.")
            except (ValueError, TypeError):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '–°—É–º–ù–µ–¥–æ–∏–º' –≤ —á–∏—Å–ª–æ: {arrears_value}")
    if data.get("–ï–§–†–°–ë"):
        risks.append(f"üî¥ –ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤ ({len(data['–ï–§–†–°–ë'])} —à—Ç.)")
    if data.get("–ù–µ–¥–æ–±–ü–æ—Å—Ç"):
        risks.append("üî¥ –ö–æ–º–ø–∞–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
    if not risks:
        return "üü¢ –Ø–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã."
    return "\n".join(risks)


async def get_financial_data(client: httpx.AsyncClient, inn: str) -> dict:
    """
    –î–µ–ª–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    revenue = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    profit = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    try:
        params = {'key': CHECKO_API_KEY, 'inn': inn}
        response = await client.get(FINANCES_API_URL, params=params, timeout=20.0)
        response.raise_for_status()

        finance_response = response.json()
        if finance_response.get("meta", {}).get("status") == "ok":
            finance_data = finance_response.get("data", {})
            if finance_data:
                latest_year = max(finance_data.keys())
                latest_year_data = finance_data[latest_year]

                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ
                revenue = _format_financial_value(latest_year_data.get("2110"), latest_year)
                profit = _format_financial_value(latest_year_data.get("2400"), latest_year)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ù–ù {inn}: {e}")

    return {"revenue": revenue, "profit": profit}


async def get_company_info_by_inn(inn: str) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –î–í–ê –∑–∞–ø—Ä–æ—Å–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + —Ñ–∏–Ω–∞–Ω—Å—ã), –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ò–ù–ù: {inn} —á–µ—Ä–µ–∑ checko.ru")

    if not CHECKO_API_KEY:
        return {"is_success": False, "error": "API –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ checko.ru –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ."}

    try:
        async with httpx.AsyncClient() as client:
            # --- –ó–∞–ø—Ä–æ—Å 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
            params = {'key': CHECKO_API_KEY, 'inn': inn}
            response = await client.get(COMPANY_API_URL, params=params, timeout=20.0)
            response.raise_for_status()
            api_response = response.json()

            meta = api_response.get("meta", {})
            if meta.get("status") != "ok":
                return {"is_success": False, "error": meta.get("message", "–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ Checko")}

            data = api_response.get("data", {})
            if not data:
                return {"is_success": False, "error": f"–ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

            # --- –ó–∞–ø—Ä–æ—Å 2: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
            financials = await get_financial_data(client, inn)

            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ ---
            report_path = os.path.join(REPORTS_DIR, f"{inn}.json")
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(api_response, f, ensure_ascii=False, indent=4)

            summary = {
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": data.get("–ù–∞–∏–º–ü–æ–ª–Ω", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                "–°—Ç–∞—Ç—É—Å": data.get("–°—Ç–∞—Ç—É—Å", {}).get("–ù–∞–∏–º", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": data.get("–î–∞—Ç–∞–†–µ–≥", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"),
                "–ì–µ–Ω. –¥–∏—Ä–µ–∫—Ç–æ—Ä": data.get("–†—É–∫–æ–≤–æ–¥", [{}])[0].get("–§–ò–û", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                "–í—ã—Ä—É—á–∫–∞": financials["revenue"],
                "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫": financials["profit"],
                "–ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤": format_risk_factors(data),
                "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç": f"/{report_path}"
            }

            return {"is_success": True, "data": summary}

    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API checko.ru: {e.response.status_code} - {e.response.text}")
        if e.response.status_code == 401:
            return {"is_success": False, "error": "–û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á."}
        return {"is_success": False, "error": f"–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ {e.response.status_code})"}
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù {inn}: {e}")
        return {"is_success": False, "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
